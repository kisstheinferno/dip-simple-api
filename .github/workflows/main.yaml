name: Deploy
on: 
  push: 
    branches: [ "eks" ]
  
jobs:
  build-api:
    name: Build API Docker Image 
    runs-on: ubuntu-latest  
    steps:  
        - name: Checkout
          uses: actions/checkout@v3     
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
        - name: Log into AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
        - name: Build and Push API Image to ECR
          env:
            ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.API_IMAGE_REPO}}
            IMAGE_TAG: v2
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./api
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  build-frontend:
    name: Build Frontend Docker Image 
    runs-on: ubuntu-latest  
    steps:  
        - name: Checkout
          uses: actions/checkout@v3     
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}
        - name: Log into AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
        - name: Build and Push Frontend Image to ECR
          env:
            ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.FRONTEND_IMAGE_REPO}}
            IMAGE_TAG: v2
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy:
    name: Deploy to EKS
    needs: [build-api, build-frontend]
    runs-on: arc-runner-set 
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{secrets.AWS_REGION}}
      - name: Install curl and unzip
        run: |
          sudo apt-get update
          sudo apt-get install -y curl unzip
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install
      - name: Configure kubectl
        run: |
          aws eks update-kubeconfig --name ${{ secrets.K8S_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }} 
      - name: Install/Update Helm Chart
        run: |
          helm upgrade --install todo ./todo --set api.image.repository=${{ secrets.API_IMAGE_URI }} --set frontend.image.repository=${{ secrets.FRONTEND_IMAGE_URI }} --set database.host=${{ secrets.DB_HOST }} --set database.username=${{ secrets.DB_USERNAME }} --set database.password=${{ secrets.DB_PASSWORD }}
